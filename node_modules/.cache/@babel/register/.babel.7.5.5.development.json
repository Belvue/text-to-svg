{
  "{\"sourceRoot\":\"D:\\\\Web Development\\\\text-to-svg-bg\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Web Development\\\\text-to-svg-bg\",\"filename\":\"D:\\\\Web Development\\\\text-to-svg-bg\\\\gulpfile.babel.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"D:\\\\Web Development\\\\text-to-svg-bg\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Web Development\\text-to-svg-bg",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Web Development\\text-to-svg-bg",
      "filename": "D:\\Web Development\\text-to-svg-bg\\gulpfile.babel.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "D:\\Web Development\\text-to-svg-bg",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Web Development\\text-to-svg-bg\\gulpfile.babel.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "D:\\Web Development\\text-to-svg-bg\\gulpfile.babel.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Web Development\\text-to-svg-bg",
        "sourceFileName": "gulpfile.babel.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _assert = _interopRequireDefault(require(\"assert\"));\n\nvar _gulp = _interopRequireDefault(require(\"gulp\"));\n\nvar _del = _interopRequireDefault(require(\"del\"));\n\nvar _gulpBabel = _interopRequireDefault(require(\"gulp-babel\"));\n\nvar _gulpMocha = _interopRequireDefault(require(\"gulp-mocha\"));\n\nvar _gulpEslint = _interopRequireDefault(require(\"gulp-eslint\"));\n\nvar _browserify = _interopRequireDefault(require(\"browserify\"));\n\nvar _vinylSourceStream = _interopRequireDefault(require(\"vinyl-source-stream\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\r\n * Copyright (c) 2016 Hideki Shiro\r\n */\n\n/* eslint-disable no-process-env, global-require */\n// Clean\n_gulp[\"default\"].task('clean', function (done) {\n  return (0, _del[\"default\"])(['build', 'npm-debug.log', '!*/.gitkeep'], done);\n}); // Lint\n\n\n_gulp[\"default\"].task('lint', function () {\n  return _gulp[\"default\"].src(['src/**/*.js', 'test/**/*.js', 'gulpfile.babel.js']).pipe((0, _gulpEslint[\"default\"])()).pipe(_gulpEslint[\"default\"].format()).pipe(_gulpEslint[\"default\"].failOnError());\n}); // Build\n\n\n_gulp[\"default\"].task('build:src', function () {\n  return _gulp[\"default\"].src('src/**/*.js').pipe((0, _gulpBabel[\"default\"])()).pipe(_gulp[\"default\"].dest('build/src/'));\n});\n\n_gulp[\"default\"].task('build:res', function () {\n  return _gulp[\"default\"].src('fonts/**/*').pipe(_gulp[\"default\"].dest('build/fonts/'));\n});\n\n_gulp[\"default\"].task('build:test:src', function () {\n  return _gulp[\"default\"].src('test/**/*.js').pipe((0, _gulpBabel[\"default\"])()).pipe(_gulp[\"default\"].dest('build/test/'));\n});\n\n_gulp[\"default\"].task('build:test:browser', function () {\n  return (0, _browserify[\"default\"])('./build/test/browser.js').bundle().pipe((0, _vinylSourceStream[\"default\"])('browser.js')).pipe(_gulp[\"default\"].dest('build/test'));\n});\n\n_gulp[\"default\"].task('build', _gulp[\"default\"].series('build:src', 'build:res', 'build:test:src', 'build:test:browser')); // Test\n\n\n_gulp[\"default\"].task('version-check', function (done) {\n  var packageVer = require('./package.json').version;\n\n  var tagVer = process.env.TRAVIS_TAG;\n\n  if (tagVer) {\n    _assert[\"default\"].equal(packageVer, tagVer, \"Package version and tagged version are mismatched. Package version is \".concat(packageVer, \", but tagged version is \").concat(tagVer));\n  }\n\n  done();\n});\n\n_gulp[\"default\"].task('test', _gulp[\"default\"].series(_gulp[\"default\"].parallel('build', 'lint', 'version-check'), function () {\n  return _gulp[\"default\"].src('build/test/index.js').pipe((0, _gulpMocha[\"default\"])());\n}));\n\n_gulp[\"default\"].task('test:html', _gulp[\"default\"].series(_gulp[\"default\"].parallel('build', 'lint', 'version-check'), function () {\n  var reporter = _path[\"default\"].join(__dirname, './build/test/html-reporter.js');\n\n  var dest = _path[\"default\"].join(__dirname, './build/test/result.html');\n\n  return _gulp[\"default\"].src('build/test/index.js').pipe((0, _gulpMocha[\"default\"])({\n    reporter: reporter,\n    reporterOptions: {\n      dest: dest\n    }\n  }));\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1bHBmaWxlLmJhYmVsLmpzIl0sIm5hbWVzIjpbImd1bHAiLCJ0YXNrIiwiZG9uZSIsInNyYyIsInBpcGUiLCJlc2xpbnQiLCJmb3JtYXQiLCJmYWlsT25FcnJvciIsImRlc3QiLCJidW5kbGUiLCJzZXJpZXMiLCJwYWNrYWdlVmVyIiwicmVxdWlyZSIsInZlcnNpb24iLCJ0YWdWZXIiLCJwcm9jZXNzIiwiZW52IiwiVFJBVklTX1RBRyIsImFzc2VydCIsImVxdWFsIiwicGFyYWxsZWwiLCJyZXBvcnRlciIsInBhdGgiLCJqb2luIiwiX19kaXJuYW1lIiwicmVwb3J0ZXJPcHRpb25zIl0sIm1hcHBpbmdzIjoiOztBQU1BOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBZEE7Ozs7QUFJQTtBQVlBO0FBRUFBLGlCQUFLQyxJQUFMLENBQVUsT0FBVixFQUFtQixVQUFBQyxJQUFJLEVBQUk7QUFDekIsU0FBTyxxQkFBSSxDQUFDLE9BQUQsRUFBVSxlQUFWLEVBQTJCLGFBQTNCLENBQUosRUFBK0NBLElBQS9DLENBQVA7QUFDRCxDQUZELEUsQ0FJQTs7O0FBRUFGLGlCQUFLQyxJQUFMLENBQVUsTUFBVixFQUFrQixZQUFNO0FBQ3RCLFNBQU9ELGlCQUFLRyxHQUFMLENBQVMsQ0FBQyxhQUFELEVBQWdCLGNBQWhCLEVBQWdDLG1CQUFoQyxDQUFULEVBQ0pDLElBREksQ0FDQyw2QkFERCxFQUVKQSxJQUZJLENBRUNDLHVCQUFPQyxNQUFQLEVBRkQsRUFHSkYsSUFISSxDQUdDQyx1QkFBT0UsV0FBUCxFQUhELENBQVA7QUFJRCxDQUxELEUsQ0FPQTs7O0FBRUFQLGlCQUFLQyxJQUFMLENBQVUsV0FBVixFQUF1QixZQUFNO0FBQzNCLFNBQU9ELGlCQUFLRyxHQUFMLENBQVMsYUFBVCxFQUNKQyxJQURJLENBQ0MsNEJBREQsRUFFSkEsSUFGSSxDQUVDSixpQkFBS1EsSUFBTCxDQUFVLFlBQVYsQ0FGRCxDQUFQO0FBR0QsQ0FKRDs7QUFNQVIsaUJBQUtDLElBQUwsQ0FBVSxXQUFWLEVBQXVCLFlBQU07QUFDM0IsU0FBT0QsaUJBQUtHLEdBQUwsQ0FBUyxZQUFULEVBQ0pDLElBREksQ0FDQ0osaUJBQUtRLElBQUwsQ0FBVSxjQUFWLENBREQsQ0FBUDtBQUVELENBSEQ7O0FBS0FSLGlCQUFLQyxJQUFMLENBQVUsZ0JBQVYsRUFBNEIsWUFBTTtBQUNoQyxTQUFPRCxpQkFBS0csR0FBTCxDQUFTLGNBQVQsRUFDSkMsSUFESSxDQUNDLDRCQURELEVBRUpBLElBRkksQ0FFQ0osaUJBQUtRLElBQUwsQ0FBVSxhQUFWLENBRkQsQ0FBUDtBQUdELENBSkQ7O0FBTUFSLGlCQUFLQyxJQUFMLENBQVUsb0JBQVYsRUFBZ0MsWUFBTTtBQUNwQyxTQUFPLDRCQUFXLHlCQUFYLEVBQ0pRLE1BREksR0FFSkwsSUFGSSxDQUVDLG1DQUFPLFlBQVAsQ0FGRCxFQUdKQSxJQUhJLENBR0NKLGlCQUFLUSxJQUFMLENBQVUsWUFBVixDQUhELENBQVA7QUFJRCxDQUxEOztBQU9BUixpQkFBS0MsSUFBTCxDQUFVLE9BQVYsRUFBbUJELGlCQUFLVSxNQUFMLENBQVksV0FBWixFQUF5QixXQUF6QixFQUFzQyxnQkFBdEMsRUFBd0Qsb0JBQXhELENBQW5CLEUsQ0FFQTs7O0FBRUFWLGlCQUFLQyxJQUFMLENBQVUsZUFBVixFQUEyQixVQUFBQyxJQUFJLEVBQUk7QUFDakMsTUFBTVMsVUFBVSxHQUFHQyxPQUFPLENBQUMsZ0JBQUQsQ0FBUCxDQUEwQkMsT0FBN0M7O0FBQ0EsTUFBTUMsTUFBTSxHQUFHQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsVUFBM0I7O0FBQ0EsTUFBSUgsTUFBSixFQUFZO0FBQ1ZJLHVCQUFPQyxLQUFQLENBQWFSLFVBQWIsRUFBeUJHLE1BQXpCLGtGQUEwR0gsVUFBMUcscUNBQStJRyxNQUEvSTtBQUNEOztBQUNEWixFQUFBQSxJQUFJO0FBQ0wsQ0FQRDs7QUFTQUYsaUJBQUtDLElBQUwsQ0FBVSxNQUFWLEVBQWtCRCxpQkFBS1UsTUFBTCxDQUFZVixpQkFBS29CLFFBQUwsQ0FBYyxPQUFkLEVBQXVCLE1BQXZCLEVBQStCLGVBQS9CLENBQVosRUFBNkQsWUFBTTtBQUNuRixTQUFPcEIsaUJBQUtHLEdBQUwsQ0FBUyxxQkFBVCxFQUNKQyxJQURJLENBQ0MsNEJBREQsQ0FBUDtBQUVELENBSGlCLENBQWxCOztBQUtBSixpQkFBS0MsSUFBTCxDQUFVLFdBQVYsRUFBdUJELGlCQUFLVSxNQUFMLENBQVlWLGlCQUFLb0IsUUFBTCxDQUFjLE9BQWQsRUFBdUIsTUFBdkIsRUFBK0IsZUFBL0IsQ0FBWixFQUE2RCxZQUFNO0FBQ3hGLE1BQU1DLFFBQVEsR0FBR0MsaUJBQUtDLElBQUwsQ0FBVUMsU0FBVixFQUFxQiwrQkFBckIsQ0FBakI7O0FBQ0EsTUFBTWhCLElBQUksR0FBR2MsaUJBQUtDLElBQUwsQ0FBVUMsU0FBVixFQUFxQiwwQkFBckIsQ0FBYjs7QUFDQSxTQUFPeEIsaUJBQUtHLEdBQUwsQ0FBUyxxQkFBVCxFQUNKQyxJQURJLENBQ0MsMkJBQU07QUFBRWlCLElBQUFBLFFBQVEsRUFBUkEsUUFBRjtBQUFZSSxJQUFBQSxlQUFlLEVBQUU7QUFBRWpCLE1BQUFBLElBQUksRUFBSkE7QUFBRjtBQUE3QixHQUFOLENBREQsQ0FBUDtBQUVELENBTHNCLENBQXZCIiwic291cmNlUm9vdCI6IkQ6XFxXZWIgRGV2ZWxvcG1lbnRcXHRleHQtdG8tc3ZnLWJnIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNiBIaWRla2kgU2hpcm9cclxuICovXHJcblxyXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm9jZXNzLWVudiwgZ2xvYmFsLXJlcXVpcmUgKi9cclxuXHJcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XHJcbmltcG9ydCBndWxwIGZyb20gJ2d1bHAnO1xyXG5pbXBvcnQgZGVsIGZyb20gJ2RlbCc7XHJcbmltcG9ydCBiYWJlbCBmcm9tICdndWxwLWJhYmVsJztcclxuaW1wb3J0IG1vY2hhIGZyb20gJ2d1bHAtbW9jaGEnO1xyXG5pbXBvcnQgZXNsaW50IGZyb20gJ2d1bHAtZXNsaW50JztcclxuaW1wb3J0IGJyb3dzZXJpZnkgZnJvbSAnYnJvd3NlcmlmeSc7XHJcbmltcG9ydCBzb3VyY2UgZnJvbSAndmlueWwtc291cmNlLXN0cmVhbSc7XHJcblxyXG4vLyBDbGVhblxyXG5cclxuZ3VscC50YXNrKCdjbGVhbicsIGRvbmUgPT4ge1xyXG4gIHJldHVybiBkZWwoWydidWlsZCcsICducG0tZGVidWcubG9nJywgJyEqLy5naXRrZWVwJ10sIGRvbmUpO1xyXG59KTtcclxuXHJcbi8vIExpbnRcclxuXHJcbmd1bHAudGFzaygnbGludCcsICgpID0+IHtcclxuICByZXR1cm4gZ3VscC5zcmMoWydzcmMvKiovKi5qcycsICd0ZXN0LyoqLyouanMnLCAnZ3VscGZpbGUuYmFiZWwuanMnXSlcclxuICAgIC5waXBlKGVzbGludCgpKVxyXG4gICAgLnBpcGUoZXNsaW50LmZvcm1hdCgpKVxyXG4gICAgLnBpcGUoZXNsaW50LmZhaWxPbkVycm9yKCkpO1xyXG59KTtcclxuXHJcbi8vIEJ1aWxkXHJcblxyXG5ndWxwLnRhc2soJ2J1aWxkOnNyYycsICgpID0+IHtcclxuICByZXR1cm4gZ3VscC5zcmMoJ3NyYy8qKi8qLmpzJylcclxuICAgIC5waXBlKGJhYmVsKCkpXHJcbiAgICAucGlwZShndWxwLmRlc3QoJ2J1aWxkL3NyYy8nKSk7XHJcbn0pO1xyXG5cclxuZ3VscC50YXNrKCdidWlsZDpyZXMnLCAoKSA9PiB7XHJcbiAgcmV0dXJuIGd1bHAuc3JjKCdmb250cy8qKi8qJylcclxuICAgIC5waXBlKGd1bHAuZGVzdCgnYnVpbGQvZm9udHMvJykpO1xyXG59KTtcclxuXHJcbmd1bHAudGFzaygnYnVpbGQ6dGVzdDpzcmMnLCAoKSA9PiB7XHJcbiAgcmV0dXJuIGd1bHAuc3JjKCd0ZXN0LyoqLyouanMnKVxyXG4gICAgLnBpcGUoYmFiZWwoKSlcclxuICAgIC5waXBlKGd1bHAuZGVzdCgnYnVpbGQvdGVzdC8nKSk7XHJcbn0pO1xyXG5cclxuZ3VscC50YXNrKCdidWlsZDp0ZXN0OmJyb3dzZXInLCAoKSA9PiB7XHJcbiAgcmV0dXJuIGJyb3dzZXJpZnkoJy4vYnVpbGQvdGVzdC9icm93c2VyLmpzJylcclxuICAgIC5idW5kbGUoKVxyXG4gICAgLnBpcGUoc291cmNlKCdicm93c2VyLmpzJykpXHJcbiAgICAucGlwZShndWxwLmRlc3QoJ2J1aWxkL3Rlc3QnKSk7XHJcbn0pO1xyXG5cclxuZ3VscC50YXNrKCdidWlsZCcsIGd1bHAuc2VyaWVzKCdidWlsZDpzcmMnLCAnYnVpbGQ6cmVzJywgJ2J1aWxkOnRlc3Q6c3JjJywgJ2J1aWxkOnRlc3Q6YnJvd3NlcicpKTtcclxuXHJcbi8vIFRlc3RcclxuXHJcbmd1bHAudGFzaygndmVyc2lvbi1jaGVjaycsIGRvbmUgPT4ge1xyXG4gIGNvbnN0IHBhY2thZ2VWZXIgPSByZXF1aXJlKCcuL3BhY2thZ2UuanNvbicpLnZlcnNpb247XHJcbiAgY29uc3QgdGFnVmVyID0gcHJvY2Vzcy5lbnYuVFJBVklTX1RBRztcclxuICBpZiAodGFnVmVyKSB7XHJcbiAgICBhc3NlcnQuZXF1YWwocGFja2FnZVZlciwgdGFnVmVyLCBgUGFja2FnZSB2ZXJzaW9uIGFuZCB0YWdnZWQgdmVyc2lvbiBhcmUgbWlzbWF0Y2hlZC4gUGFja2FnZSB2ZXJzaW9uIGlzICR7cGFja2FnZVZlcn0sIGJ1dCB0YWdnZWQgdmVyc2lvbiBpcyAke3RhZ1Zlcn1gKTtcclxuICB9XHJcbiAgZG9uZSgpO1xyXG59KTtcclxuXHJcbmd1bHAudGFzaygndGVzdCcsIGd1bHAuc2VyaWVzKGd1bHAucGFyYWxsZWwoJ2J1aWxkJywgJ2xpbnQnLCAndmVyc2lvbi1jaGVjaycpLCAoKSA9PiB7XHJcbiAgcmV0dXJuIGd1bHAuc3JjKCdidWlsZC90ZXN0L2luZGV4LmpzJylcclxuICAgIC5waXBlKG1vY2hhKCkpO1xyXG59KSk7XHJcblxyXG5ndWxwLnRhc2soJ3Rlc3Q6aHRtbCcsIGd1bHAuc2VyaWVzKGd1bHAucGFyYWxsZWwoJ2J1aWxkJywgJ2xpbnQnLCAndmVyc2lvbi1jaGVjaycpLCAoKSA9PiB7XHJcbiAgY29uc3QgcmVwb3J0ZXIgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi9idWlsZC90ZXN0L2h0bWwtcmVwb3J0ZXIuanMnKTtcclxuICBjb25zdCBkZXN0ID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4vYnVpbGQvdGVzdC9yZXN1bHQuaHRtbCcpO1xyXG4gIHJldHVybiBndWxwLnNyYygnYnVpbGQvdGVzdC9pbmRleC5qcycpXHJcbiAgICAucGlwZShtb2NoYSh7IHJlcG9ydGVyLCByZXBvcnRlck9wdGlvbnM6IHsgZGVzdCB9IH0pKTtcclxufSkpO1xyXG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "gulpfile.babel.js"
      ],
      "names": [
        "gulp",
        "task",
        "done",
        "src",
        "pipe",
        "eslint",
        "format",
        "failOnError",
        "dest",
        "bundle",
        "series",
        "packageVer",
        "require",
        "version",
        "tagVer",
        "process",
        "env",
        "TRAVIS_TAG",
        "assert",
        "equal",
        "parallel",
        "reporter",
        "path",
        "join",
        "__dirname",
        "reporterOptions"
      ],
      "mappings": "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",
      "sourceRoot": "D:\\Web Development\\text-to-svg-bg",
      "sourcesContent": [
        "/**\r\n * Copyright (c) 2016 Hideki Shiro\r\n */\r\n\r\n/* eslint-disable no-process-env, global-require */\r\n\r\nimport path from 'path';\r\nimport assert from 'assert';\r\nimport gulp from 'gulp';\r\nimport del from 'del';\r\nimport babel from 'gulp-babel';\r\nimport mocha from 'gulp-mocha';\r\nimport eslint from 'gulp-eslint';\r\nimport browserify from 'browserify';\r\nimport source from 'vinyl-source-stream';\r\n\r\n// Clean\r\n\r\ngulp.task('clean', done => {\r\n  return del(['build', 'npm-debug.log', '!*/.gitkeep'], done);\r\n});\r\n\r\n// Lint\r\n\r\ngulp.task('lint', () => {\r\n  return gulp.src(['src/**/*.js', 'test/**/*.js', 'gulpfile.babel.js'])\r\n    .pipe(eslint())\r\n    .pipe(eslint.format())\r\n    .pipe(eslint.failOnError());\r\n});\r\n\r\n// Build\r\n\r\ngulp.task('build:src', () => {\r\n  return gulp.src('src/**/*.js')\r\n    .pipe(babel())\r\n    .pipe(gulp.dest('build/src/'));\r\n});\r\n\r\ngulp.task('build:res', () => {\r\n  return gulp.src('fonts/**/*')\r\n    .pipe(gulp.dest('build/fonts/'));\r\n});\r\n\r\ngulp.task('build:test:src', () => {\r\n  return gulp.src('test/**/*.js')\r\n    .pipe(babel())\r\n    .pipe(gulp.dest('build/test/'));\r\n});\r\n\r\ngulp.task('build:test:browser', () => {\r\n  return browserify('./build/test/browser.js')\r\n    .bundle()\r\n    .pipe(source('browser.js'))\r\n    .pipe(gulp.dest('build/test'));\r\n});\r\n\r\ngulp.task('build', gulp.series('build:src', 'build:res', 'build:test:src', 'build:test:browser'));\r\n\r\n// Test\r\n\r\ngulp.task('version-check', done => {\r\n  const packageVer = require('./package.json').version;\r\n  const tagVer = process.env.TRAVIS_TAG;\r\n  if (tagVer) {\r\n    assert.equal(packageVer, tagVer, `Package version and tagged version are mismatched. Package version is ${packageVer}, but tagged version is ${tagVer}`);\r\n  }\r\n  done();\r\n});\r\n\r\ngulp.task('test', gulp.series(gulp.parallel('build', 'lint', 'version-check'), () => {\r\n  return gulp.src('build/test/index.js')\r\n    .pipe(mocha());\r\n}));\r\n\r\ngulp.task('test:html', gulp.series(gulp.parallel('build', 'lint', 'version-check'), () => {\r\n  const reporter = path.join(__dirname, './build/test/html-reporter.js');\r\n  const dest = path.join(__dirname, './build/test/result.html');\r\n  return gulp.src('build/test/index.js')\r\n    .pipe(mocha({ reporter, reporterOptions: { dest } }));\r\n}));\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1567111453871
  }
}